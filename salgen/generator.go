package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"

	"strings"

	"github.com/go-gad/sal/looker"
)

const (
	Prefix = "Sal"
)

type generator struct {
	buf    bytes.Buffer
	indent string
}

func (g *generator) p(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, g.indent+format+"\n", args...)
}

func (g *generator) in() {
	g.indent += "\t"
}

func (g *generator) out() {
	if len(g.indent) > 0 {
		g.indent = g.indent[0 : len(g.indent)-1]
	}
}

func (g *generator) Generate(pkg *looker.Package, pkgName string) error {
	g.p("// Code generated by SalGen. DO NOT EDIT.")
	g.p("package %v", pkgName)

	g.p("import (")
	g.p("%q", "context")
	g.p("%q", pkg.ImportPath)
	g.p(")")

	for _, intf := range pkg.Interfaces {
		if err := g.GenerateInterface(intf); err != nil {
			return err
		}
	}

	return nil
}

func (g *generator) GenerateInterface(intf *looker.Interface) error {
	implName := Prefix + intf.Name
	g.p("type %v struct {", implName)
	g.p("DB *sql.DB")
	g.p("}")

	g.p("func New%v(db *sql.DB) *%v {", intf.Name, implName)
	g.p("return &%v{DB: db}", implName)
	g.p("}")

	for _, mtd := range intf.Methods {
		if err := g.GenerateMethod(implName, mtd); err != nil {
			return err
		}
	}

	return nil
}

func (g *generator) GenerateMethod(implName string, mtd *looker.Method) error {
	g.p("")

	inArgs := make([]string, 0, 2)
	inArgs = append(inArgs, "ctx context.Context")
	reqPrm := mtd.In[1]
	inArgs = append(inArgs, "req "+reqPrm.PtrPrefix()+reqPrm.PkgAlias()+"."+reqPrm.UserType)
	inArgsStr := strings.Join(inArgs, ", ")

	g.p("func (s *%v) %v(%v) error {", implName, mtd.Name, inArgsStr)
	g.p("return nil")
	g.p("}")

	// func (s *salStoreClient) CreateAuthor(ctx context.Context, req *bookstore.CreateAuthorReq) (*bookstore.CreateAuthorResp, error) {

	return nil
}

// Output returns the generator's output, formatted in the standard Go style.
func (g *generator) Output() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated source code: %s\n%s", err, g.buf.String())
	}
	return src
}
