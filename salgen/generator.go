package main

import (
	"bytes"
	"fmt"
	"go/format"
	"log"

	"github.com/go-gad/sal/looker"
)

type generator struct {
	buf    bytes.Buffer
	indent string
}

func (g *generator) p(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, g.indent+format+"\n", args...)
}

func (g *generator) in() {
	g.indent += "\t"
}

func (g *generator) out() {
	if len(g.indent) > 0 {
		g.indent = g.indent[0 : len(g.indent)-1]
	}
}

func (g *generator) Generate(pkg *looker.Package, pkgName string) error {
	g.p("// Code generated by SalGen. DO NOT EDIT.")
	g.p("package %v", pkgName)

	return nil
}

// Output returns the generator's output, formatted in the standard Go style.
func (g *generator) Output() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		log.Fatalf("Failed to format generated source code: %s\n%s", err, g.buf.String())
	}
	return src
}
